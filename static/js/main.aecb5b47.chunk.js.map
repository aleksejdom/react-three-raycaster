{"version":3,"sources":["state.js","components/Player.jsx","components/ControllPlayer.jsx","components/Collision.jsx","components/Floor.jsx","components/Obstacle.jsx","App.js","reportWebVitals.js","index.js"],"names":["state","collidableObjects","keyboardEvent","pressed","camera","position","THREE","fov","near","far","aspect","window","innerWidth","innerHeight","player","speed","Camera","props","ref","useRef","set","useThree","useEffect","current","useFrame","updateMatrixWorld","Player","gl","addEventListener","event","isMesh","health","updateProjectionMatrix","moveDistance","keyCode","rotation","y","translateZ","keyControll","colideObj","originPoint","clone","geometry","attributes","vector","i","l","count","fromBufferAttribute","directionVector","applyMatrix4","matrix","sub","collisions","normalize","intersectObjects","length","distance","console","log","document","getElementById","firstChild","nodeValue","collision","castShadow","args","domElement","attach","color","Floor","Math","PI","side","Obstacle","mesh","push","App","style","height","width","id","powerPreference","antialias","stencil","depth","shadowMap","background","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.aecb5b47.chunk.js","sourcesContent":["import * as THREE from 'three'\r\n\r\nconst state = {\r\n    collidableObjects: [],\r\n    keyboardEvent: null,\r\n    pressed : false,\r\n    camera: {\r\n        position: new THREE.Vector3(0, 0, 2), \r\n        fov: 100, \r\n        near: 0.1, \r\n        far: 2000,\r\n        aspect : window.innerWidth / window.innerHeight \r\n    },\r\n    player: {\r\n        speed: 0.025\r\n    }\r\n}\r\n\r\nexport default state;","import { useRef, useEffect } from 'react'\r\nimport { useThree, useFrame } from '@react-three/fiber'\r\nimport { Physics, usePlane, useBox } from '@react-three/cannon'\r\nimport {keyControll} from './ControllPlayer';\r\nimport {collision} from './Collision';\r\n\r\n\r\nimport state from \"../state\";\r\n\r\n\r\nconst Camera = props => {\r\n    const ref = useRef();\r\n    const set = useThree((state) => state.set);\r\n    useEffect(() => void set({ camera: ref.current }), []);\r\n\r\n    useFrame(() => {\r\n        ref.current.updateMatrixWorld()\r\n    });\r\n    return <perspectiveCamera ref={ref} {...props} />;\r\n};\r\n\r\n\r\nconst Player = props => {\r\n    \r\n    const { camera, gl } = useThree()\r\n    /* const player = useRef(); */\r\n\r\n    window.addEventListener('keydown', onKeyDown, false);\r\n    window.addEventListener('keyup', onKeyUp, false);\r\n\r\n    \r\n    function onKeyUp (event) {\r\n        state.pressed = false;\r\n        state.keyboardEvent = event\r\n       /*  console.log('onKeyUp', keyboardEvent) */\r\n    }\r\n\r\n     function onKeyDown (event) {\r\n        state.pressed = true;  \r\n        state.keyboardEvent = event\r\n        /* console.log('onKeyDown', keyboardEvent) */\r\n    } \r\n\r\n    const player = useRef()\r\n\r\n    //Mounted - Loaded first\r\n    useEffect(() => {\r\n        if ( player.current.isMesh ) {\r\n            player.current.health = 100\r\n        }\r\n        camera.aspect = state.camera.aspect\r\n        camera.updateProjectionMatrix();\r\n    });\r\n    \r\n    //requestAnimationFrame Loop\r\n    useFrame(() => {\r\n        \r\n        keyControll(player.current)\r\n        collision(player.current)\r\n        \r\n    })\r\n\r\n\r\n\r\n    return(\r\n        \r\n        <mesh\r\n            castShadow\r\n            args={[camera, gl.domElement]}\r\n            ref={player}\r\n            >\r\n            <sphereBufferGeometry \r\n                args={[1, 36, 36]} \r\n                attach=\"geometry\"     \r\n            />\r\n            <meshBasicMaterial color={0xFFFFFF} attach=\"material\"/>\r\n            <Camera \r\n                position={state.camera.position} \r\n                fov={state.camera.fov} \r\n                near={state.camera.near} \r\n                far={state.camera.far} \r\n                aspect={state.camera.aspect}\r\n            />\r\n           \r\n        </mesh>\r\n\r\n    )\r\n}\r\n\r\nexport default Player;","import state from \"../state\";\r\n\r\n\r\nexport function keyControll(player) {\r\n\r\n        if (state.pressed) {\r\n            \r\n            const moveDistance = state.player.speed\r\n            \r\n            if ( state.keyboardEvent.keyCode === 37 )  {\r\n                player.rotation.y += moveDistance;\r\n            }\r\n            if ( state.keyboardEvent.keyCode === 39 )  { \r\n                player.rotation.y -= moveDistance;\r\n            }\r\n            if ( state.keyboardEvent.keyCode === 38 ) { \r\n                player.translateZ(-moveDistance);\r\n            }\r\n            if ( state.keyboardEvent.keyCode === 40 ) { \r\n                player.translateZ(moveDistance);\r\n            }\r\n            else if (state.keyboardEvent.keyCode === 32) {\r\n                player.position.y += moveDistance;\r\n            }\r\n        }\r\n}\r\n\r\n   \r\n     \r\n         \r\n\r\n","import state from \"../state\";\r\nimport * as THREE from 'three';\r\n\r\nexport function collision(player){\r\n\r\n    const colideObj = state.collidableObjects;\r\n    /* console.log(player.current) */\r\n    if ( player.isMesh ) {\r\n        \r\n        var originPoint = player.position.clone();\r\n        \r\n        const position = player.geometry.attributes.position;\r\n        const vector = new THREE.Vector3();\r\n        //console.log('player.geometry.attributes.position', position)\r\n        \r\n        for ( let i = 0, l = position.count; i < l; i ++ )\r\n        {\r\n            vector.fromBufferAttribute( position, i );\r\n                        \r\n            var localVertex = vector.clone();\r\n            var globalVertex = localVertex.applyMatrix4( player.matrix );\r\n            var directionVector = globalVertex.sub( player.position );\r\n            \r\n            var raycast = new THREE.Raycaster( originPoint, directionVector.clone().normalize() );\r\n            let collisions = raycast.intersectObjects( colideObj );\r\n            \r\n            if (collisions.length > 0 && collisions[0].distance < directionVector.length()) {\r\n                console.log(\"Collision Detected\");\r\n                player.health--;        \r\n                document.getElementById('healthLabel').firstChild.nodeValue = \"Health: \" + player.health\r\n                break;\r\n            } \r\n        }\r\n    }\r\n    \r\n}\r\n ","import * as THREE from 'three';\r\nimport { usePlane } from '@react-three/cannon'\r\n\r\nconst Floor = props => {\r\n    \r\n    const rotation = Math.PI/2;\r\n   /*  const [ref] = usePlane(() => ({ rotation:[rotation,0,0], mass:0, ...props })) */\r\n\r\n    return(\r\n        <mesh\r\n            position={[0,-1,0]}\r\n            rotation={[rotation,0,0]}\r\n            /* ref={ref} */\r\n        >\r\n            <planeBufferGeometry args={[1000, 1000, 10, 10]} />\r\n            <meshBasicMaterial color={0x228B22} side={THREE.DoubleSide}/>\r\n        </mesh>\r\n    )\r\n\r\n}\r\n\r\nexport default Floor;","\r\nimport { useBox } from '@react-three/cannon'\r\nimport { useRef, useEffect } from 'react'\r\nimport state from \"../state\";\r\n\r\nconst Obstacle = props => {\r\n\r\n    /* const [mesh] = useBox(() => ({ mass: 0, position: [0, 0, 0], ...props })) */\r\n\r\n    const mesh = useRef()\r\n\r\n    useEffect(() => {\r\n        const {current} = mesh\r\n        state.collidableObjects.push(\r\n            current\r\n        )\r\n    }, [])\r\n\r\n    return(\r\n        <mesh \r\n            position={props.position}\r\n            ref={mesh}\r\n        >\r\n            <boxBufferGeometry attach=\"geometry\" args={[15, 5]} />\r\n            <meshBasicMaterial attach=\"material\" color={0x9E1A1A} />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport default Obstacle;","import './App.css';\nimport ReactDOM from 'react-dom'\nimport React, { useRef, useState, useEffect } from 'react'\n\nimport { Canvas, useFrame, useThree  } from '@react-three/fiber'\nimport { Physics } from '@react-three/cannon'\n\nimport Player from './components/Player';\nimport Floor from './components/Floor';\nimport Obstacle from './components/Obstacle';\n\nfunction App() {\n\n  return (\n    <div style={{height: '100vh', width: '100vw'}}>\n      <div id=\"healthLabel\">Health: 100</div>\n       <Canvas \n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: false,\n          stencil: false,\n          depth: false\n        }}\n  \n        shadowMap \n        style={{background: '#000'}}\n      > \n          <ambientLight intensity={0.1} />         \n          <Floor />\n          <Obstacle position={[-2,0,-5]}/>\n          <Player />\n         \n      </Canvas>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}